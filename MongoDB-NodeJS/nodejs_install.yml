---
- name: Install Node.js and dependencies on Rocky 9
  hosts: application
  become: true

  tasks:
    - name: Remove conflicting nsolid packages
      ansible.builtin.dnf:
        name:
          - nsolid-20.10.0-ns5.0.1.x86_64
          - nsolid-20.10.0-ns5.0.2.x86_64
          - nsolid-20.11.0-ns5.0.3.x86_64
        state: absent
      ignore_errors: true

    - name: Install EPEL repository for additional packages
      ansible.builtin.dnf:
        name: epel-release
        state: present

    # - name: Add Node.js repository
    #   ansible.builtin.shell: |
    #     curl -fsSL https://rpm.nodesource.com/setup_{{ node_version }}.x | bash -
    #   args:
    #     creates: /etc/yum.repos.d/nodesource-el9.repo

    - name: Download Node.js repository setup script
      ansible.builtin.get_url:
        url: "https://rpm.nodesource.com/setup_{{ node_version }}.x"
        dest: "/tmp/nodesource_setup.sh"
        mode: '0755'  # Make the script executable
      register: download_result
      until: download_result is succeeded
      retries: 3
      delay: 2

    - name: Add Node.js repository by executing the setup script
      ansible.builtin.command: "/bin/bash /tmp/nodesource_setup.sh"
      args:
        creates: /etc/yum.repos.d/nodesource-el9.repo
      when: download_result is succeeded

    - name: Install Node.js (including npm from NodeSource)
      ansible.builtin.dnf:
        name: "nodejs" # Installing 'nodejs' from NodeSource should include the correct npm
        state: present
        enablerepo: nodesource-nodejs
        # Remove the separate npm installation task for now

    - name: Verify npm version
      ansible.builtin.command: npm -v
      register: npm_version
      changed_when: false
      failed_when: npm_version.rc != 0

    - name: Create application directory
      ansible.builtin.file:
        path: "{{ app_dir }}"
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: Install MongoDB Node.js driver
      community.general.npm:
        name: mongodb
        path: "{{ app_dir }}"
        state: present
      register: npm_install
      failed_when: npm_install.failed

    - name: Verify MongoDB module installation
      ansible.builtin.command: ls "{{ app_dir }}/node_modules/mongodb"
      register: mongodb_check
      failed_when: mongodb_check.rc != 0

    - name: Create a simple Node.js app with MongoDB connection
      ansible.builtin.copy:
        dest: "{{ app_dir }}/index.js"
        content: |
          const { MongoClient } = require('mongodb');
          const http = require('http');

          const mongodbUrl = 'mongodb://{{ mongodb_user | default('admin') }}:{{ mongodb_password }}@{{ mongodb_host }}:27017';
          const dbName = '{{ mongodb_db | default('test') }}';
          const hostname = '0.0.0.0';
          const port = 3000;

          async function connectToMongoDB(retries = 5, delay = 5000) {
            let client;
            for (let i = 0; i < retries; i++) {
              try {
                client = await MongoClient.connect(mongodbUrl, { useNewUrlParser: true, useUnifiedTopology: true });
                console.log('Connected to MongoDB!');
                return client;
              } catch (err) {
                console.error(`MongoDB connection attempt ${i + 1} failed:`, err);
                if (i < retries - 1) await new Promise(resolve => setTimeout(resolve, delay));
              }
            }
            throw new Error('Failed to connect to MongoDB after retries');
          }

          async function startServer() {
            let client;
            try {
              client = await connectToMongoDB();
              const db = client.db(dbName);

              await db.collection('test').insertOne({ message: 'Hello from Node.js', timestamp: new Date() });
              console.log('Inserted document into MongoDB!');

              const server = http.createServer((req, res) => {
                res.statusCode = 200;
                res.setHeader('Content-Type', 'text/plain');
                res.end('Hello World from Node.js with MongoDB!\n');
              });

              server.listen(port, hostname, () => {
                console.log(`Server running at http://${hostname}:${port}/`);
              });

            } catch (err) {
              console.error('Error:', err);
              process.exit(1);
            }
          }

          startServer();
        mode: '0644'

    - name: Create systemd service for Node.js app
      ansible.builtin.copy:
        dest: /etc/systemd/system/nodejs-app.service
        content: |
          [Unit]
          Description=Node.js Application
          After=network.target

          [Service]
          ExecStart=/usr/bin/node /opt/nodejs_app/index.js
          WorkingDirectory=/opt/nodejs_app
          Restart=always
          User=root
          Group=root
          StandardOutput=journal
          StandardError=journal
          RestartSec=5

          [Install]
          WantedBy=multi-user.target
        mode: '0644'

    - name: Reload systemd daemon
      ansible.builtin.systemd_service:
        daemon_reload: true

    - name: Configure firewall for outgoing MongoDB connection
      ansible.posix.firewalld:
        rich_rule: 'rule family="ipv4" destination address="{{ mongodb_host }}" <port protocol="tcp" port="{{ mongodb_port }}"/> accept'
        permanent: true
        state: enabled
      when: inventory_hostname == nodejs_hostname   # Apply only to nodejs host

    - name: Reload firewalld on nodejsww5
      ansible.builtin.systemd:
        name: firewalld
        state: reloaded

    - name: Ensure MongoDB is reachable
      become: true
      ansible.builtin.wait_for:
        host: "{{ mongodb_host }}"
        port: "{{ mongodb_port }}"
        timeout: 60

    - name: Enable and start Node.js service
      ansible.builtin.systemd_service:
        name: nodejs-app
        enabled: true
        state: restarted

    - name: Wait briefly for service to initialize
      ansible.builtin.pause:
        seconds: 5

    - name: Wait for Node.js app to be available
      ansible.builtin.wait_for:
        host: 0.0.0.0
        port: 3000
        state: started
        timeout: 30
